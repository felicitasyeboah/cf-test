name: CI Pipeline for CityFeedback Project with Spring Boot and Angular

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
jobs:
  backend-verify-test-analyse:
    name: Backend - Verify, Test, and Analyze Java Code
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Set up Docker Compose
      - name: Set up Docker Compose
        run: docker-compose -f docker-compose.yaml up -d


        # Step 3: Wait for MySQL to be ready
      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec $(docker-compose ps -q mysqldb) mysqladmin ping --host=mysqldb --user=user --password=pass --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      # Step 4: Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build, Validate, Test and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cf-test -Pcoverage

      # Step 9: Stop Docker Compose
      - name: Stop Docker Compose
        run: docker-compose -f docker-compose.yaml down
  frontend-lint:
    name: Frontend - Run Lint for Angular Project
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}


      # Step 2: Set up Node.js (required for Angular)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Adjust based on your Angular project's Node.js version

      # Step 3: Navigate to the Angular project folder
      - name: Change Directory to Angular Project
        working-directory: angular-frontend
        run: pwd # Optional: Debugging step to confirm the current directory

      # Step 4: Install dependencies for the Angular project
      - name: Install Dependencies
        working-directory: angular-frontend
        run: npm install

      # Step 5: Run linting on the Angular project
      - name: Run Lint
        working-directory: angular-frontend
        run: npm run lint:fix
      # Step 6: Check for changes made by lint:fix
      - name: Check for Changes
        working-directory: angular-frontend
        run: |
          git status --porcelain > changes.txt
          if [ -s changes.txt ]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

      # Step 7: Commit and push changes if any
      - name: Commit and Push Changes
        if: env.changes == 'true'
        working-directory: angular-frontend
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "fix: auto-fix lint errors"
          
          # Checkout the PR branch explicitly before pushing
          git checkout ${{ github.head_ref }}
          
          # Use the GitHub PAT for authentication to push changes
          git remote set-url origin https://github-actions:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          
          # Push changes to the pull request branch
          git push origin ${{ github.head_ref }}